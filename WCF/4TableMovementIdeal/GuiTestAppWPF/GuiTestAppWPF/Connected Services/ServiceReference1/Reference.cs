//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GuiTestAppWPF.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITableMover", CallbackContract=typeof(GuiTestAppWPF.ServiceReference1.ITableMoverCallback))]
    public interface ITableMover {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableMover/GetPosition")]
        void GetPosition();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableMover/GetPosition")]
        System.Threading.Tasks.Task GetPositionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableMover/MoveTable")]
        void MoveTable(int targetPosition);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableMover/MoveTable")]
        System.Threading.Tasks.Task MoveTableAsync(int targetPosition);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableMover/IsOnline")]
        void IsOnline();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableMover/IsOnline")]
        System.Threading.Tasks.Task IsOnlineAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITableMoverCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableMover/SendTablePosition")]
        void SendTablePosition(int position);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITableMover/SendOnlineStatus")]
        void SendOnlineStatus(bool flag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITableMoverChannel : GuiTestAppWPF.ServiceReference1.ITableMover, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TableMoverClient : System.ServiceModel.DuplexClientBase<GuiTestAppWPF.ServiceReference1.ITableMover>, GuiTestAppWPF.ServiceReference1.ITableMover {
        
        public TableMoverClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TableMoverClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TableMoverClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TableMoverClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TableMoverClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetPosition() {
            base.Channel.GetPosition();
        }
        
        public System.Threading.Tasks.Task GetPositionAsync() {
            return base.Channel.GetPositionAsync();
        }
        
        public void MoveTable(int targetPosition) {
            base.Channel.MoveTable(targetPosition);
        }
        
        public System.Threading.Tasks.Task MoveTableAsync(int targetPosition) {
            return base.Channel.MoveTableAsync(targetPosition);
        }
        
        public void IsOnline() {
            base.Channel.IsOnline();
        }
        
        public System.Threading.Tasks.Task IsOnlineAsync() {
            return base.Channel.IsOnlineAsync();
        }
    }
}
